# This is a dummy file generated by `rails-annotate-solargraph`
# to extend solargraph's understanding of your Rails app.
# You should probably add it to `.gitignore`

# Some static comments to fill a few gaps
# in Rails comprehension.

class ActionController::Base
  include ActionController::MimeResponds
  include ActionController::Redirecting
  include ActionController::Cookies
  include AbstractController::Rendering
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::Rescuable::ClassMethods
  extend AbstractController::Callbacks::ClassMethods
  extend ActionController::RequestForgeryProtection::ClassMethods
end
class ActiveRecord::Base
  extend ActiveRecord::Reflection::ClassMethods
  extend ActiveModel::SecurePassword::ClassMethods
  extend ActiveModel::Attributes::ClassMethods
  include ActiveModel::Attributes
  include ActiveModel::Dirty
  extend ActiveRecord::Validations::ClassMethods
  include ActiveRecord::Validations
  extend ActiveModel::Validations::ClassMethods
  include ActiveModel::Validations
  extend ActiveRecord::Calculations
  extend ActiveRecord::Batches
  extend ActiveRecord::QueryMethods
  extend ActiveRecord::FinderMethods
  extend ActiveRecord::Associations::ClassMethods
  extend ActiveRecord::Inheritance::ClassMethods
  extend ActiveRecord::ModelSchema::ClassMethods
  extend ActiveRecord::Transactions::ClassMethods
  extend ActiveRecord::Scoping::Named::ClassMethods
  include ActiveRecord::Persistence

  # Registers a callback to be called after initialize.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_initialize(*args, &block); end
  # Registers a callback to be called after find.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_find(*args, &block); end
  # Registers a callback to be called after touch.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_touch(*args, &block); end
  # Registers a callback to be called before validation.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_validation(*args, &block); end
  # Registers a callback to be called after validation.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_validation(*args, &block); end
  # Registers a callback to be called before save.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_save(*args, &block); end
  # Registers a callback to be called around save.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_save(*args, &block); end
  # Registers a callback to be called after save.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_save(*args, &block); end
  # Registers a callback to be called before create.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_create(*args, &block); end
  # Registers a callback to be called around create.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_create(*args, &block); end
  # Registers a callback to be called after create.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_create(*args, &block); end
  # Registers a callback to be called before update.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_update(*args, &block); end
  # Registers a callback to be called around update.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_update(*args, &block); end
  # Registers a callback to be called after update.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_update(*args, &block); end
  # Registers a callback to be called before destroy.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_destroy(*args, &block); end
  # Registers a callback to be called around destroy.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_destroy(*args, &block); end
  # Registers a callback to be called after destroy.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_destroy(*args, &block); end
  # Registers a callback to be called after commit.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_commit(*args, &block); end
  # Registers a callback to be called after rollback.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_rollback(*args, &block); end

end
class Rails
  # @return [Rails::Application]
  def self.application; end
end
class Rails::Application
  # @return [ActionDispatch::Routing::RouteSet]
  def routes; end
end
class ActionDispatch::Routing::Mapper
  include ActionDispatch::Routing::Mapper::Base
  include ActionDispatch::Routing::Mapper::HttpHelpers
  include ActionDispatch::Routing::Mapper::Redirection
  include ActionDispatch::Routing::Mapper::Scoping
  include ActionDispatch::Routing::Mapper::Concerns
  include ActionDispatch::Routing::Mapper::Resources
  include ActionDispatch::Routing::Mapper::CustomUrls
end
class ActionDispatch::Routing::RouteSet
  # @yieldself [ActionDispatch::Routing::Mapper]
  def draw; end
end

# Dynamically generated documentation

# %%<RailsAnnotateSolargraph:Start:boards>%%

class DB::Board < ApplicationRecord
  # `belongs_to` relation with `DB::Workspace`. Database column `boards.workspace_id`.
  # @param val [DB::Workspace, nil]
  def workspace=(val); end
  # `belongs_to` relation with `DB::Workspace`. Database column `boards.workspace_id`.
  # @return [DB::Workspace, nil]
  def workspace; end
  # Database column `boards.id`, type: `integer`.
  # @param val [Integer, nil]
  def id=(val); end
  # Database column `boards.id`, type: `integer`.
  # @return [Integer, nil]
  def id; end
  # Database column `boards.name`, type: `string`.
  # @param val [String, nil]
  def name=(val); end
  # Database column `boards.name`, type: `string`.
  # @return [String, nil]
  def name; end
  # Database column `boards.created_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def created_at=(val); end
  # Database column `boards.created_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def created_at; end
  # Database column `boards.updated_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def updated_at=(val); end
  # Database column `boards.updated_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def updated_at; end
  # Database column `boards.workspace_id`, type: `integer`.
  # @param val [Integer, nil]
  def workspace_id=(val); end
  # Database column `boards.workspace_id`, type: `integer`.
  # @return [Integer, nil]
  def workspace_id; end
end
# %%<RailsAnnotateSolargraph:End:boards>%%


# %%<RailsAnnotateSolargraph:Start:lists>%%

class DB::List < ApplicationRecord
  # `belongs_to` relation with `DB::Board`. Database column `lists.board_id`.
  # @param val [DB::Board, nil]
  def board=(val); end
  # `belongs_to` relation with `DB::Board`. Database column `lists.board_id`.
  # @return [DB::Board, nil]
  def board; end
  # Database column `lists.id`, type: `integer`.
  # @param val [Integer, nil]
  def id=(val); end
  # Database column `lists.id`, type: `integer`.
  # @return [Integer, nil]
  def id; end
  # Database column `lists.name`, type: `string`.
  # @param val [String, nil]
  def name=(val); end
  # Database column `lists.name`, type: `string`.
  # @return [String, nil]
  def name; end
  # Database column `lists.pos`, type: `float`.
  # @param val [BigDecimal, nil]
  def pos=(val); end
  # Database column `lists.pos`, type: `float`.
  # @return [BigDecimal, nil]
  def pos; end
  # Database column `lists.deleted`, type: `boolean`.
  # @param val [Boolean, nil]
  def deleted=(val); end
  # Database column `lists.deleted`, type: `boolean`.
  # @return [Boolean, nil]
  def deleted; end
  # Database column `lists.board_id`, type: `integer`.
  # @param val [Integer, nil]
  def board_id=(val); end
  # Database column `lists.board_id`, type: `integer`.
  # @return [Integer, nil]
  def board_id; end
  # Database column `lists.created_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def created_at=(val); end
  # Database column `lists.created_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def created_at; end
  # Database column `lists.updated_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def updated_at=(val); end
  # Database column `lists.updated_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def updated_at; end
end
# %%<RailsAnnotateSolargraph:End:lists>%%


# %%<RailsAnnotateSolargraph:Start:users>%%

class DB::User < ApplicationRecord
  # Scope `:admin`.
  #
  #     klass.scope value_method_name, -> { where(name => value) }
  #
  # @return [Array<DB::User>, nil]
  def self.admin(); end
  # Scope `:developer`.
  #
  #     klass.scope value_method_name, -> { where(name => value) }
  #
  # @return [Array<DB::User>, nil]
  def self.developer(); end
  # Scope `:guest`.
  #
  #     klass.scope value_method_name, -> { where(name => value) }
  #
  # @return [Array<DB::User>, nil]
  def self.guest(); end
  # Scope `:not_admin`.
  #
  #     klass.scope "not_#{value_method_name}", -> { where.not(name => value) }
  #
  # @return [Array<DB::User>, nil]
  def self.not_admin(); end
  # Scope `:not_developer`.
  #
  #     klass.scope "not_#{value_method_name}", -> { where.not(name => value) }
  #
  # @return [Array<DB::User>, nil]
  def self.not_developer(); end
  # Scope `:not_guest`.
  #
  #     klass.scope "not_#{value_method_name}", -> { where.not(name => value) }
  #
  # @return [Array<DB::User>, nil]
  def self.not_guest(); end
  # Scope `:not_regular`.
  #
  #     klass.scope "not_#{value_method_name}", -> { where.not(name => value) }
  #
  # @return [Array<DB::User>, nil]
  def self.not_regular(); end
  # Scope `:regular`.
  #
  #     klass.scope value_method_name, -> { where(name => value) }
  #
  # @return [Array<DB::User>, nil]
  def self.regular(); end
  # `has_many` relation with `DB::UserWorkspace`. Database column `user_workspaces.user_id`.
  # @param val [Array<DB::UserWorkspace>, nil]
  def user_workspaces=(val); end
  # `has_many` relation with `DB::UserWorkspace`. Database column `user_workspaces.user_id`.
  # @return [Array<DB::UserWorkspace>, nil]
  def user_workspaces; end
  # `has_many` relation with `DB::Workspace` through `DB::UserWorkspace`.
  # @param val [Array<DB::Workspace>, nil]
  def workspaces=(val); end
  # `has_many` relation with `DB::Workspace` through `DB::UserWorkspace`.
  # @return [Array<DB::Workspace>, nil]
  def workspaces; end
  # Database column `users.id`, type: `integer`.
  # @param val [Integer, nil]
  def id=(val); end
  # Database column `users.id`, type: `integer`.
  # @return [Integer, nil]
  def id; end
  # Database column `users.name`, type: `string`.
  # @param val [String, nil]
  def name=(val); end
  # Database column `users.name`, type: `string`.
  # @return [String, nil]
  def name; end
  # Database column `users.created_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def created_at=(val); end
  # Database column `users.created_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def created_at; end
  # Database column `users.updated_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def updated_at=(val); end
  # Database column `users.updated_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def updated_at; end
  # Database column `users.email`, type: `string`.
  # @param val [String, nil]
  def email=(val); end
  # Database column `users.email`, type: `string`.
  # @return [String, nil]
  def email; end
  # Database column `users.role`, type: `integer`.
  # @param val [Integer, nil]
  def role=(val); end
  # Database column `users.role`, type: `integer`.
  # @return [Integer, nil]
  def role; end
end
# %%<RailsAnnotateSolargraph:End:users>%%


# %%<RailsAnnotateSolargraph:Start:user_workspaces>%%

class DB::UserWorkspace < ApplicationRecord
  # `belongs_to` relation with `DB::User`. Database column `user_workspaces.user_id`.
  # @param val [DB::User, nil]
  def user=(val); end
  # `belongs_to` relation with `DB::User`. Database column `user_workspaces.user_id`.
  # @return [DB::User, nil]
  def user; end
  # `belongs_to` relation with `DB::Workspace`. Database column `user_workspaces.workspace_id`.
  # @param val [DB::Workspace, nil]
  def workspace=(val); end
  # `belongs_to` relation with `DB::Workspace`. Database column `user_workspaces.workspace_id`.
  # @return [DB::Workspace, nil]
  def workspace; end
  # Database column `user_workspaces.id`, type: `integer`.
  # @param val [Integer, nil]
  def id=(val); end
  # Database column `user_workspaces.id`, type: `integer`.
  # @return [Integer, nil]
  def id; end
  # Database column `user_workspaces.user_id`, type: `integer`.
  # @param val [Integer, nil]
  def user_id=(val); end
  # Database column `user_workspaces.user_id`, type: `integer`.
  # @return [Integer, nil]
  def user_id; end
  # Database column `user_workspaces.workspace_id`, type: `integer`.
  # @param val [Integer, nil]
  def workspace_id=(val); end
  # Database column `user_workspaces.workspace_id`, type: `integer`.
  # @return [Integer, nil]
  def workspace_id; end
  # Database column `user_workspaces.created_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def created_at=(val); end
  # Database column `user_workspaces.created_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def created_at; end
  # Database column `user_workspaces.updated_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def updated_at=(val); end
  # Database column `user_workspaces.updated_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def updated_at; end
end
# %%<RailsAnnotateSolargraph:End:user_workspaces>%%


# %%<RailsAnnotateSolargraph:Start:workspaces>%%

class DB::Workspace < ApplicationRecord
  # `has_many` relation with `DB::Board`. Database column `boards.workspace_id`.
  # @param val [Array<DB::Board>, nil]
  def boards=(val); end
  # `has_many` relation with `DB::Board`. Database column `boards.workspace_id`.
  # @return [Array<DB::Board>, nil]
  def boards; end
  # `has_many` relation with `DB::UserWorkspace`. Database column `user_workspaces.workspace_id`.
  # @param val [Array<DB::UserWorkspace>, nil]
  def user_workspaces=(val); end
  # `has_many` relation with `DB::UserWorkspace`. Database column `user_workspaces.workspace_id`.
  # @return [Array<DB::UserWorkspace>, nil]
  def user_workspaces; end
  # `has_many` relation with `DB::User` through `DB::UserWorkspace`.
  # @param val [Array<DB::User>, nil]
  def users=(val); end
  # `has_many` relation with `DB::User` through `DB::UserWorkspace`.
  # @return [Array<DB::User>, nil]
  def users; end
  # Database column `workspaces.id`, type: `integer`.
  # @param val [Integer, nil]
  def id=(val); end
  # Database column `workspaces.id`, type: `integer`.
  # @return [Integer, nil]
  def id; end
  # Database column `workspaces.name`, type: `string`.
  # @param val [String, nil]
  def name=(val); end
  # Database column `workspaces.name`, type: `string`.
  # @return [String, nil]
  def name; end
  # Database column `workspaces.created_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def created_at=(val); end
  # Database column `workspaces.created_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def created_at; end
  # Database column `workspaces.updated_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def updated_at=(val); end
  # Database column `workspaces.updated_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def updated_at; end
end
# %%<RailsAnnotateSolargraph:End:workspaces>%%

