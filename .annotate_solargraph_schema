# This is a dummy file generated by `rails-annotate-solargraph`
# to extend solargraph's understanding of your Rails app.
# You should probably add it to `.gitignore`

# Some static comments to fill a few gaps
# in Rails comprehension.

class ActionController::Base
  include ActionController::MimeResponds
  include ActionController::Redirecting
  include ActionController::Cookies
  include AbstractController::Rendering
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::Rescuable::ClassMethods
  extend AbstractController::Callbacks::ClassMethods
  extend ActionController::RequestForgeryProtection::ClassMethods
end
class ActiveRecord::Base
  extend ActiveRecord::Reflection::ClassMethods
  extend ActiveModel::SecurePassword::ClassMethods
  extend ActiveModel::Attributes::ClassMethods
  include ActiveModel::Attributes
  include ActiveModel::Dirty
  extend ActiveRecord::Validations::ClassMethods
  include ActiveRecord::Validations
  extend ActiveModel::Validations::ClassMethods
  include ActiveModel::Validations
  extend ActiveRecord::Calculations
  extend ActiveRecord::Batches
  extend ActiveRecord::QueryMethods
  extend ActiveRecord::FinderMethods
  extend ActiveRecord::Associations::ClassMethods
  extend ActiveRecord::Inheritance::ClassMethods
  extend ActiveRecord::ModelSchema::ClassMethods
  extend ActiveRecord::Transactions::ClassMethods
  extend ActiveRecord::Scoping::Named::ClassMethods
  include ActiveRecord::Persistence

  # Registers a callback to be called after initialize.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_initialize(*args, &block); end
  # Registers a callback to be called after find.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_find(*args, &block); end
  # Registers a callback to be called after touch.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_touch(*args, &block); end
  # Registers a callback to be called before validation.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_validation(*args, &block); end
  # Registers a callback to be called after validation.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_validation(*args, &block); end
  # Registers a callback to be called before save.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_save(*args, &block); end
  # Registers a callback to be called around save.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_save(*args, &block); end
  # Registers a callback to be called after save.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_save(*args, &block); end
  # Registers a callback to be called before create.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_create(*args, &block); end
  # Registers a callback to be called around create.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_create(*args, &block); end
  # Registers a callback to be called after create.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_create(*args, &block); end
  # Registers a callback to be called before update.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_update(*args, &block); end
  # Registers a callback to be called around update.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_update(*args, &block); end
  # Registers a callback to be called after update.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_update(*args, &block); end
  # Registers a callback to be called before destroy.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_destroy(*args, &block); end
  # Registers a callback to be called around destroy.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_destroy(*args, &block); end
  # Registers a callback to be called after destroy.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_destroy(*args, &block); end
  # Registers a callback to be called after commit.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_commit(*args, &block); end
  # Registers a callback to be called after rollback.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_rollback(*args, &block); end

end
class Rails
  # @return [Rails::Application]
  def self.application; end
end
class Rails::Application
  # @return [ActionDispatch::Routing::RouteSet]
  def routes; end
end
class ActionDispatch::Routing::Mapper
  include ActionDispatch::Routing::Mapper::Base
  include ActionDispatch::Routing::Mapper::HttpHelpers
  include ActionDispatch::Routing::Mapper::Redirection
  include ActionDispatch::Routing::Mapper::Scoping
  include ActionDispatch::Routing::Mapper::Concerns
  include ActionDispatch::Routing::Mapper::Resources
  include ActionDispatch::Routing::Mapper::CustomUrls
end
class ActionDispatch::Routing::RouteSet
  # @yieldself [ActionDispatch::Routing::Mapper]
  def draw; end
end

# Dynamically generated documentation
