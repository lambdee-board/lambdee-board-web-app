---
openapi: 3.0.1
info:
  title: Lambdee API V1
  version: v1
paths:
  "/api/boards":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: list boards
      tags:
      - Boards
      parameters:
      - name: limit
        in: query
        required: false
        description: Decides how many entities should be returned
        example: 3
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                  - id: 1
                    name: Calcium
                    colour: "#40bf40"
                    workspace_id: 1
                    created_at: '2023-01-12T18:31:02.518Z'
                    updated_at: '2023-01-12T18:31:02.518Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/1
                    workspace_url: http://www.example.com/api/workspaces/1
                  - id: 2
                    name: Tellurium
                    colour: "#947a7a"
                    workspace_id: 2
                    created_at: '2023-01-12T18:31:02.521Z'
                    updated_at: '2023-01-12T18:31:02.521Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/2
                    workspace_url: http://www.example.com/api/workspaces/2
                  - id: 3
                    name: Aluminum
                    colour: "#318c31"
                    workspace_id: 3
                    created_at: '2023-01-12T18:31:02.524Z'
                    updated_at: '2023-01-12T18:31:02.524Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/3
                    workspace_url: http://www.example.com/api/workspaces/3
                  - id: 4
                    name: Rutherfordium
                    colour: "#eef2f2"
                    workspace_id: 4
                    created_at: '2023-01-12T18:31:02.526Z'
                    updated_at: '2023-01-12T18:31:02.526Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/4
                    workspace_url: http://www.example.com/api/workspaces/4
                  - id: 5
                    name: Praseodymium
                    colour: "#9d9dec"
                    workspace_id: 5
                    created_at: '2023-01-12T18:31:02.528Z'
                    updated_at: '2023-01-12T18:31:02.528Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/5
                    workspace_url: http://www.example.com/api/workspaces/5
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/board_response"
    post:
      summary: create board
      tags:
      - Boards
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 6
                    name: New Board
                    colour:
                    workspace_id: 6
                    created_at: '2023-01-12T18:31:02.596Z'
                    updated_at: '2023-01-12T18:31:02.596Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/6
                    workspace_url: http://www.example.com/api/workspaces/6
              schema:
                "$ref": "#/components/schemas/board_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/board_request"
  "/api/boards/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show board
      tags:
      - Boards
      parameters:
      - name: tasks
        in: query
        type: string
        schema:
          "$ref": "#/components/schemas/include_associated_enum"
        required: false
      - name: lists
        in: query
        type: string
        schema:
          "$ref": "#/components/schemas/include_associated_enum"
        required: false
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful with `lists=all`:
                  summary: successful with `lists=all`
                  value:
                    id: 7
                    name: Praseodymium
                    colour: "#747416"
                    workspace_id: 7
                    created_at: '2023-01-12T18:31:02.607Z'
                    updated_at: '2023-01-12T18:31:02.607Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/7
                    workspace_url: http://www.example.com/api/workspaces/7
                    lists:
                    - id: 1
                      name: lemon
                      pos: 65536.0
                      visible: false
                      deleted_at: '2023-01-12T18:31:02.627Z'
                      board_id: 7
                      created_at: '2023-01-12T18:31:02.619Z'
                      updated_at: '2023-01-12T18:31:02.622Z'
                      custom_data: {}
                      url: http://www.example.com/api/lists/1
                      board_url: http://www.example.com/api/boards/7
                    - id: 2
                      name: gray
                      pos: 65536.0
                      visible: false
                      deleted_at:
                      board_id: 7
                      created_at: '2023-01-12T18:31:02.631Z'
                      updated_at: '2023-01-12T18:31:02.632Z'
                      custom_data: {}
                      url: http://www.example.com/api/lists/2
                      board_url: http://www.example.com/api/boards/7
                successful with `lists=visible`:
                  summary: successful with `lists=visible`
                  value:
                    id: 10
                    name: Germanium
                    colour: "#f6fefe"
                    workspace_id: 10
                    created_at: '2023-01-12T18:31:02.659Z'
                    updated_at: '2023-01-12T18:31:02.659Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/10
                    workspace_url: http://www.example.com/api/workspaces/10
                    lists: []
                successful with `lists=archived`:
                  summary: successful with `lists=archived`
                  value:
                    id: 12
                    name: Polonium
                    colour: "#4cc2c2"
                    workspace_id: 12
                    created_at: '2023-01-12T18:31:02.691Z'
                    updated_at: '2023-01-12T18:31:02.691Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/12
                    workspace_url: http://www.example.com/api/workspaces/12
                    lists:
                    - id: 4
                      name: ochre
                      pos: 65536.0
                      visible: false
                      deleted_at: '2023-01-12T18:31:02.698Z'
                      board_id: 12
                      created_at: '2023-01-12T18:31:02.695Z'
                      updated_at: '2023-01-12T18:31:02.696Z'
                      custom_data: {}
                      url: http://www.example.com/api/lists/4
                      board_url: http://www.example.com/api/boards/12
                    - id: 5
                      name: lime
                      pos: 65536.0
                      visible: false
                      deleted_at: '2023-01-12T18:31:02.704Z'
                      board_id: 12
                      created_at: '2023-01-12T18:31:02.701Z'
                      updated_at: '2023-01-12T18:31:02.703Z'
                      custom_data: {}
                      url: http://www.example.com/api/lists/5
                      board_url: http://www.example.com/api/boards/12
                successful:
                  summary: successful
                  value:
                    id: 15
                    name: Xenon
                    colour: "#6b6b0f"
                    workspace_id: 15
                    created_at: '2023-01-12T18:31:02.730Z'
                    updated_at: '2023-01-12T18:31:02.730Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/15
                    workspace_url: http://www.example.com/api/workspaces/15
              schema:
                "$ref": "#/components/schemas/board_response"
    put:
      summary: update board
      tags:
      - Boards
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 16
                    name: New Name
                    colour: "#a5a5df"
                    workspace_id: 16
                    created_at: '2023-01-12T18:31:02.755Z'
                    updated_at: '2023-01-12T18:31:02.769Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/16
                    workspace_url: http://www.example.com/api/workspaces/16
              schema:
                "$ref": "#/components/schemas/board_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/board_request"
    delete:
      summary: delete board
      tags:
      - Boards
      responses:
        '204':
          description: successful
  "/api/boards/{id}/user_tasks":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: list current user tasks including board, lists, tags, users and author
      tags:
      - Boards
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 18
                    name: Lanthanum
                    colour: "#bf0d0d"
                    workspace_id: 18
                    created_at: '2023-01-12T18:31:02.804Z'
                    updated_at: '2023-01-12T18:31:02.804Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/boards/18
                    workspace_url: http://www.example.com/api/workspaces/18
                    lists: []
              schema:
                "$ref": "#/components/schemas/board_response"
  "/api/boards/recently_viewed":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: list current user recently viewed boards (max 6)
      tags:
      - Boards
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/board_response"
  "/api/tasks/{id}/comments":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Task id
      required: true
      schema:
        type: string
    get:
      summary: List task's comments
      tags:
      - Comments
      parameters:
      - name: with_author
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful with `with_author=true`:
                  summary: successful with `with_author=true`
                  value:
                  - id: 5
                    body: "##### Accusantium\nNeque dolor odio. Et nam eos. Magni
                      saepe illo.\n* Expedita. \n* Nobis. \n* Nemo. \n* Vel. \n* Corporis.
                      \n* Velit. \n* Dolore. \n* Quaerat. \n* Voluptatem. \n* Aperiam.
                      \n"
                    deleted_at:
                    author_id: 22
                    task_id: 2
                    created_at: '2023-01-12T18:31:02.963Z'
                    updated_at: '2023-01-12T18:31:02.963Z'
                    url: http://www.example.com/api/comments/5
                    author:
                      id: 22
                      name: Patrice Mosciski
                      avatar_url: https://www.gravatar.com/avatar/7960d6148df6eea4b945c9d9ff7a4344
                      role: manager
                      url: http://www.example.com/api/users/22
                      email: patrice_mosciski.1673548262@example.com
                      created_at: '2023-01-12T18:31:02.944Z'
                      updated_at: '2023-01-12T18:31:02.944Z'
                      custom_data: {}
                  - id: 4
                    body: |-
                      # Quos
                      Quasi vel eveniet. Quod molestias omnis.
                      #### Dolor
                      Distinctio magnam aut. Porro numquam perferendis. Error eos minima.
                      #### Eveniet
                    deleted_at:
                    author_id: 22
                    task_id: 2
                    created_at: '2023-01-12T18:31:02.961Z'
                    updated_at: '2023-01-12T18:31:02.961Z'
                    url: http://www.example.com/api/comments/4
                    author:
                      id: 22
                      name: Patrice Mosciski
                      avatar_url: https://www.gravatar.com/avatar/7960d6148df6eea4b945c9d9ff7a4344
                      role: manager
                      url: http://www.example.com/api/users/22
                      email: patrice_mosciski.1673548262@example.com
                      created_at: '2023-01-12T18:31:02.944Z'
                      updated_at: '2023-01-12T18:31:02.944Z'
                      custom_data: {}
                  - id: 3
                    body: |-
                      ###### Sunt
                      Consequatur autem voluptatem.
                      `Et.`
                    deleted_at:
                    author_id: 22
                    task_id: 2
                    created_at: '2023-01-12T18:31:02.960Z'
                    updated_at: '2023-01-12T18:31:02.960Z'
                    url: http://www.example.com/api/comments/3
                    author:
                      id: 22
                      name: Patrice Mosciski
                      avatar_url: https://www.gravatar.com/avatar/7960d6148df6eea4b945c9d9ff7a4344
                      role: manager
                      url: http://www.example.com/api/users/22
                      email: patrice_mosciski.1673548262@example.com
                      created_at: '2023-01-12T18:31:02.944Z'
                      updated_at: '2023-01-12T18:31:02.944Z'
                      custom_data: {}
                  - id: 2
                    body: "##### Voluptatem\nEt et ut. Quam id inventore. Deleniti
                      cum non.\n* In. \n* Ipsa. \n* Molestiae. \n* Dolore. \n* Similique.
                      \n* Molestias. \n* Vitae. \n* Explicabo. \n"
                    deleted_at:
                    author_id: 22
                    task_id: 2
                    created_at: '2023-01-12T18:31:02.958Z'
                    updated_at: '2023-01-12T18:31:02.958Z'
                    url: http://www.example.com/api/comments/2
                    author:
                      id: 22
                      name: Patrice Mosciski
                      avatar_url: https://www.gravatar.com/avatar/7960d6148df6eea4b945c9d9ff7a4344
                      role: manager
                      url: http://www.example.com/api/users/22
                      email: patrice_mosciski.1673548262@example.com
                      created_at: '2023-01-12T18:31:02.944Z'
                      updated_at: '2023-01-12T18:31:02.944Z'
                      custom_data: {}
                  - id: 1
                    body: |-
                      #### Ducimus
                      Beatae eos quasi. Quia hic accusantium. Iure aperiam non.
                      ```ruby
                      Id.
                      ```
                    deleted_at:
                    author_id: 22
                    task_id: 2
                    created_at: '2023-01-12T18:31:02.954Z'
                    updated_at: '2023-01-12T18:31:02.954Z'
                    url: http://www.example.com/api/comments/1
                    author:
                      id: 22
                      name: Patrice Mosciski
                      avatar_url: https://www.gravatar.com/avatar/7960d6148df6eea4b945c9d9ff7a4344
                      role: manager
                      url: http://www.example.com/api/users/22
                      email: patrice_mosciski.1673548262@example.com
                      created_at: '2023-01-12T18:31:02.944Z'
                      updated_at: '2023-01-12T18:31:02.944Z'
                      custom_data: {}
                successful:
                  summary: successful
                  value:
                  - id: 10
                    body: |-
                      #### Beatae
                      Debitis soluta dicta. Tempore soluta autem.
                      ut | qui | at
                      ---- | ---- | ----
                      sit | labore | eveniet
                      voluptas | dolor | et
                    deleted_at:
                    author_id: 25
                    task_id: 3
                    created_at: '2023-01-12T18:31:03.010Z'
                    updated_at: '2023-01-12T18:31:03.010Z'
                    url: http://www.example.com/api/comments/10
                  - id: 9
                    body: "## Laborum\nVelit unde earum.\n* Dolorem. \n"
                    deleted_at:
                    author_id: 25
                    task_id: 3
                    created_at: '2023-01-12T18:31:03.009Z'
                    updated_at: '2023-01-12T18:31:03.009Z'
                    url: http://www.example.com/api/comments/9
                  - id: 8
                    body: |-
                      ### Ratione
                      Eveniet rerum quisquam.
                      ### Officiis
                    deleted_at:
                    author_id: 25
                    task_id: 3
                    created_at: '2023-01-12T18:31:03.007Z'
                    updated_at: '2023-01-12T18:31:03.007Z'
                    url: http://www.example.com/api/comments/8
                  - id: 7
                    body: |-
                      ###### Amet
                      Eum perferendis ea. Possimus odit praesentium. Molestiae veniam nemo.
                      ratione | blanditiis | perferendis
                      ---- | ---- | ----
                      illum | libero | sunt
                      corporis | libero | mollitia
                    deleted_at:
                    author_id: 25
                    task_id: 3
                    created_at: '2023-01-12T18:31:03.004Z'
                    updated_at: '2023-01-12T18:31:03.004Z'
                    url: http://www.example.com/api/comments/7
                  - id: 6
                    body: |-
                      ### Voluptate
                      Sit ut earum. Sint numquam rerum.
                      ###### Tenetur
                      Laborum voluptatem eos. Optio et quis. Qui quia sapiente.
                      `Magni.`
                    deleted_at:
                    author_id: 25
                    task_id: 3
                    created_at: '2023-01-12T18:31:03.002Z'
                    updated_at: '2023-01-12T18:31:03.002Z'
                    url: http://www.example.com/api/comments/6
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/comment_response"
  "/api/lists":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List lists
      tags:
      - Lists
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                  - id: 9
                    name: violet
                    pos: 65536.0
                    visible: false
                    deleted_at:
                    board_id: 28
                    created_at: '2023-01-12T18:31:03.032Z'
                    updated_at: '2023-01-12T18:31:03.032Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/9
                    board_url: http://www.example.com/api/boards/28
                  - id: 10
                    name: coral
                    pos: 65536.0
                    visible: false
                    deleted_at:
                    board_id: 29
                    created_at: '2023-01-12T18:31:03.036Z'
                    updated_at: '2023-01-12T18:31:03.036Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/10
                    board_url: http://www.example.com/api/boards/29
                  - id: 11
                    name: lilac
                    pos: 65536.0
                    visible: false
                    deleted_at:
                    board_id: 30
                    created_at: '2023-01-12T18:31:03.040Z'
                    updated_at: '2023-01-12T18:31:03.040Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/11
                    board_url: http://www.example.com/api/boards/30
                  - id: 12
                    name: copper
                    pos: 65536.0
                    visible: false
                    deleted_at:
                    board_id: 31
                    created_at: '2023-01-12T18:31:03.044Z'
                    updated_at: '2023-01-12T18:31:03.044Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/12
                    board_url: http://www.example.com/api/boards/31
                  - id: 13
                    name: aquamarine
                    pos: 65536.0
                    visible: false
                    deleted_at:
                    board_id: 32
                    created_at: '2023-01-12T18:31:03.049Z'
                    updated_at: '2023-01-12T18:31:03.049Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/13
                    board_url: http://www.example.com/api/boards/32
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/list_response"
    post:
      summary: Create List
      tags:
      - Lists
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 14
                    name: New List
                    pos: 1212.0
                    visible: false
                    deleted_at:
                    board_id: 33
                    created_at: '2023-01-12T18:31:03.089Z'
                    updated_at: '2023-01-12T18:31:03.089Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/14
                    board_url: http://www.example.com/api/boards/33
              schema:
                "$ref": "#/components/schemas/list_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/list_request"
  "/api/lists/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show List
      tags:
      - Lists
      parameters:
      - name: tasks
        in: query
        type: string
        schema:
          "$ref": "#/components/schemas/include_associated_enum"
        required: false
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful with `tasks=all`:
                  summary: successful with `tasks=all`
                  value:
                    id: 15
                    name: burgundy
                    pos: 65536.0
                    visible: false
                    deleted_at:
                    board_id: 34
                    created_at: '2023-01-12T18:31:03.097Z'
                    updated_at: '2023-01-12T18:31:03.097Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/15
                    board_url: http://www.example.com/api/boards/34
                    tasks:
                    - id: 4
                      name: Sgt. Pepper's Lonely Hearts Club Band
                      pos: 65536.0
                      priority: low
                      spent_time: 0
                      points: 3
                      due_time: '2023-01-19T18:31:03.099Z'
                      list_id: 15
                      deleted_at:
                      url: http://www.example.com/api/tasks/4
                      list_url: http://www.example.com/api/lists/15
                      users:
                      - id: 30
                        name: Antonia Schaefer
                        avatar_url: https://www.gravatar.com/avatar/3c707e294d516d7deee107ad8343abe1
                        role: manager
                        url: http://www.example.com/api/users/30
                      - id: 31
                        name: Sen. Mel McKenzie
                        avatar_url: https://www.gravatar.com/avatar/66ed7c0b9a404502b5fb600cb8a1e7f4
                        role: manager
                        url: http://www.example.com/api/users/31
                      tags:
                      - id: 2
                        name: IT
                        colour: "#aa74aa"
                        url: http://www.example.com/api/tags/2
                      - id: 3
                        name: Community-Services
                        colour: "#0303c4"
                        url: http://www.example.com/api/tags/3
                    - id: 5
                      name: Boston
                      pos: 65536.0
                      priority: medium
                      spent_time: 0
                      points: 2
                      due_time: '2023-01-19T18:31:03.131Z'
                      list_id: 15
                      deleted_at: '2023-01-12T18:31:03.143Z'
                      url: http://www.example.com/api/tasks/5
                      list_url: http://www.example.com/api/lists/15
                      users: []
                      tags: []
                successful with `tasks=visible`:
                  summary: successful with `tasks=visible`
                  value:
                    id: 18
                    name: amaranth
                    pos: 65536.0
                    visible: false
                    deleted_at:
                    board_id: 39
                    created_at: '2023-01-12T18:31:03.174Z'
                    updated_at: '2023-01-12T18:31:03.174Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/18
                    board_url: http://www.example.com/api/boards/39
                    tasks:
                    - id: 6
                      name: Frozen
                      pos: 65536.0
                      priority: medium
                      spent_time: 0
                      points: 3
                      due_time: '2023-01-19T18:31:03.177Z'
                      list_id: 18
                      deleted_at:
                      url: http://www.example.com/api/tasks/6
                      list_url: http://www.example.com/api/lists/18
                      users:
                      - id: 35
                        name: Kathryne Terry
                        avatar_url: https://www.gravatar.com/avatar/b7c62a92b0fb377d827196ee458ced0b
                        role: manager
                        url: http://www.example.com/api/users/35
                      - id: 36
                        name: Oliver Schinner
                        avatar_url: https://www.gravatar.com/avatar/cff423e9b7785205089b3e0007ccf79e
                        role: manager
                        url: http://www.example.com/api/users/36
                      tags:
                      - id: 4
                        name: Accounting
                        colour: "#de7cde"
                        url: http://www.example.com/api/tags/4
                    - id: 7
                      name: The Marshall Mathers LP
                      pos: 65536.0
                      priority: low
                      spent_time: 0
                      points: 4
                      due_time: '2023-01-19T18:31:03.223Z'
                      list_id: 18
                      deleted_at:
                      url: http://www.example.com/api/tasks/7
                      list_url: http://www.example.com/api/lists/18
                      users: []
                      tags: []
                successful with `tasks=archived`:
                  summary: successful with `tasks=archived`
                  value:
                    id: 21
                    name: mauve
                    pos: 65536.0
                    visible: false
                    deleted_at:
                    board_id: 43
                    created_at: '2023-01-12T18:31:03.303Z'
                    updated_at: '2023-01-12T18:31:03.303Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/21
                    board_url: http://www.example.com/api/boards/43
                    tasks:
                    - id: 8
                      name: The Eminem Show
                      pos: 65536.0
                      priority: very_low
                      spent_time: 0
                      points: 5
                      due_time: '2023-01-19T18:31:03.307Z'
                      list_id: 21
                      deleted_at: '2023-01-12T18:31:03.349Z'
                      url: http://www.example.com/api/tasks/8
                      list_url: http://www.example.com/api/lists/21
                      users: []
                      tags: []
                    - id: 9
                      name: Viva la Vida or Death and All His Friends
                      pos: 65536.0
                      priority: low
                      spent_time: 0
                      points: 1
                      due_time: '2023-01-19T18:31:03.351Z'
                      list_id: 21
                      deleted_at: '2023-01-12T18:31:03.363Z'
                      url: http://www.example.com/api/tasks/9
                      list_url: http://www.example.com/api/lists/21
                      users:
                      - id: 41
                        name: Alejandro Prosacco LLD
                        avatar_url: https://www.gravatar.com/avatar/2d91bd807aaa07249300e5393d73e8f0
                        role: developer
                        url: http://www.example.com/api/users/41
                      tags:
                      - id: 5
                        name: Government
                        colour: "#868603"
                        url: http://www.example.com/api/tags/5
                successful:
                  summary: successful
                  value:
                    id: 24
                    name: lilac
                    pos: 65536.0
                    visible: false
                    deleted_at:
                    board_id: 47
                    created_at: '2023-01-12T18:31:03.399Z'
                    updated_at: '2023-01-12T18:31:03.399Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/24
                    board_url: http://www.example.com/api/boards/47
              schema:
                "$ref": "#/components/schemas/list_response"
    put:
      summary: Update list
      tags:
      - Lists
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 25
                    name: New Name
                    pos: 65536.0
                    visible: false
                    deleted_at:
                    board_id: 48
                    created_at: '2023-01-12T18:31:03.420Z'
                    updated_at: '2023-01-12T18:31:03.435Z'
                    custom_data: {}
                    url: http://www.example.com/api/lists/25
                    board_url: http://www.example.com/api/boards/48
              schema:
                "$ref": "#/components/schemas/list_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/list_request"
    delete:
      summary: Delete list
      tags:
      - Lists
      responses:
        '204':
          description: successful
  "/api/script_runs":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List script runs
      tags:
      - ScriptRuns
      parameters:
      - name: limit
        in: query
        required: false
        description: Decides how many entities should be returned
        example: 3
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    runs:
                    - id: 3
                      script_id: 3
                      input: puts 'Hello world'
                      output: Hello world
                      initiator_id: 52
                      state: running
                      triggered_at: '2023-01-12T18:31:03.498Z'
                      delay: 60
                      executed_at: '2023-01-12T18:32:03.498Z'
                      script_name: My first Lambdee Script
                      url: http://www.example.com/api/script_runs/3
                    - id: 2
                      script_id: 2
                      input: puts 'Hello world'
                      output: Hello world
                      initiator_id: 50
                      state: running
                      triggered_at: '2023-01-12T18:31:03.490Z'
                      delay: 60
                      executed_at: '2023-01-12T18:32:03.490Z'
                      script_name: My first Lambdee Script
                      url: http://www.example.com/api/script_runs/2
                    - id: 1
                      script_id: 1
                      input: puts 'Hello world'
                      output: Hello world
                      initiator_id: 48
                      state: running
                      triggered_at: '2023-01-12T18:31:03.473Z'
                      delay: 60
                      executed_at: '2023-01-12T18:32:03.473Z'
                      script_name: My first Lambdee Script
                      url: http://www.example.com/api/script_runs/1
              schema:
                "$ref": "#/components/schemas/script_run_pages_response"
  "/api/scripts/{id}/script_runs":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Script id
      required: true
      schema:
        type: string
    - name: limit
      in: query
      required: false
      description: Decides how many entities should be returned
      example: 3
      schema:
        type: integer
    get:
      summary: List script's script runs
      tags:
      - ScriptRuns
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    runs:
                    - id: 4
                      script_id: 4
                      input: puts 'Hello world'
                      output: Hello world
                      initiator_id: 56
                      state: running
                      triggered_at: '2023-01-12T18:31:03.533Z'
                      delay: 60
                      executed_at: '2023-01-12T18:32:03.533Z'
                      script_name: My first Lambdee Script
                      url: http://www.example.com/api/script_runs/4
              schema:
                "$ref": "#/components/schemas/script_run_pages_response"
  "/api/script_runs/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show script run
      tags:
      - ScriptRuns
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 5
                    script_id: 5
                    input: puts 'Hello world'
                    output: Hello world
                    initiator_id: 60
                    state: running
                    triggered_at: '2023-01-12T18:31:03.556Z'
                    delay: 60
                    executed_at: '2023-01-12T18:32:03.556Z'
                    script_name: My first Lambdee Script
                    url: http://www.example.com/api/script_runs/5
              schema:
                "$ref": "#/components/schemas/script_run_response"
    put:
      summary: Update script run
      tags:
      - ScriptRuns
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 6
                    script_id: 6
                    input: puts 'Hello world'
                    output: example output
                    initiator_id: 64
                    state: executed
                    triggered_at: '2023-01-12T18:31:03.585Z'
                    delay: 60
                    executed_at: '2023-01-12T18:32:03.585Z'
                    script_name: My first Lambdee Script
                    url: http://www.example.com/api/script_runs/6
              schema:
                "$ref": "#/components/schemas/script_run_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/script_run_request"
  "/api/script_triggers":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    post:
      summary: Create script trigger
      tags:
      - Script triggers
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 1
                    script_id: 7
                    subject_type: DB::Task
                    subject_id: 10
                    action: destroy
                    delay: 60
                    url: http://www.example.com/api/script_triggers/1
              schema:
                "$ref": "#/components/schemas/script_trigger_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/script_trigger_request"
  "/api/script_triggers/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show script trigger
      tags:
      - Script triggers
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 2
                    script_id: 8
                    subject_type:
                    subject_id:
                    action: create
                    delay: 60
                    url: http://www.example.com/api/script_triggers/2
              schema:
                "$ref": "#/components/schemas/script_trigger_response"
    put:
      summary: Update script trigger
      tags:
      - Script triggers
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 3
                    script_id: 9
                    subject_type:
                    subject_id:
                    action: destroy
                    delay: 60
                    url: http://www.example.com/api/script_triggers/3
              schema:
                "$ref": "#/components/schemas/script_trigger_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/script_trigger_request"
    delete:
      summary: Delete script_trigger
      tags:
      - Script triggers
      responses:
        '204':
          description: successful
  "/api/scripts":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List scripts
      tags:
      - Scripts
      parameters:
      - name: limit
        in: query
        required: false
        description: Decides how many entities should be returned
        example: 3
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                  - id: 11
                    content: puts 'hello world'
                    name: My first Lambdee Script
                    description: Description of the script
                    author_id: 80
                    url: http://www.example.com/api/scripts/11
                  - id: 12
                    content: puts 'hello world'
                    name: My first Lambdee Script
                    description: Description of the script
                    author_id: 81
                    url: http://www.example.com/api/scripts/12
                  - id: 13
                    content: puts 'hello world'
                    name: My first Lambdee Script
                    description: Description of the script
                    author_id: 82
                    url: http://www.example.com/api/scripts/13
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/script_response"
    post:
      summary: Create Script
      tags:
      - Scripts
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 14
                    content: puts 'Hello world!'
                    name: New Script
                    description: What script does
                    author_id: 85
                    url: http://www.example.com/api/scripts/14
                    script_triggers:
                    - id: 5
                      script_id: 14
                      subject_type:
                      subject_id:
                      action: create
                      delay: 60
                      url: http://www.example.com/api/script_triggers/5
                    - id: 6
                      script_id: 14
                      subject_type: DB::Task
                      subject_id:
                      action: update
                      delay: 60
                      url: http://www.example.com/api/script_triggers/6
                    - id: 7
                      script_id: 14
                      subject_type: DB::Task
                      subject_id: 11
                      action: destroy
                      delay: 60
                      url: http://www.example.com/api/script_triggers/7
                    ui_script_triggers: []
              schema:
                "$ref": "#/components/schemas/script_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/script_request"
  "/api/scripts/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show Script
      tags:
      - Scripts
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 15
                    content: puts 'hello world'
                    name: My first Lambdee Script
                    description: Description of the script
                    author_id: 88
                    url: http://www.example.com/api/scripts/15
                    script_triggers:
                    - id: 8
                      script_id: 15
                      subject_type:
                      subject_id:
                      action: create
                      delay: 60
                      url: http://www.example.com/api/script_triggers/8
                    ui_script_triggers:
                    - id: 1
                      script_id: 15
                      subject_type:
                      subject_id:
                      scope_type:
                      scope_id:
                      author_id: 89
                      delay:
                      private:
                      colour: "#ffffff"
                      text: Send a message
                      url: http://www.example.com/api/ui_script_triggers/1
              schema:
                "$ref": "#/components/schemas/script_response"
    put:
      summary: Update Script
      tags:
      - Scripts
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 16
                    content: puts 'hello world'
                    name: New Name
                    description: Description of the script
                    author_id: 92
                    url: http://www.example.com/api/scripts/16
                    script_triggers:
                    - id: 10
                      script_id: 16
                      subject_type:
                      subject_id:
                      action: create
                      delay: 60
                      url: http://www.example.com/api/script_triggers/10
                    ui_script_triggers: []
              schema:
                "$ref": "#/components/schemas/script_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/script_request"
    delete:
      summary: Delete script
      tags:
      - Scripts
      responses:
        '204':
          description: successful
  "/api/boards/{id}/sprints":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Board id
      required: true
      schema:
        type: string
    get:
      summary: List board's sprints
      tags:
      - Sprints
      parameters:
      - name: page
        in: query
        required: false
        description: Decides which result page should be returned.
        example: 2
        schema:
          type: integer
      - name: per
        in: query
        required: false
        description: Decides how many entities should be returned per one page. **Works
          only, when `page` param is given.**
        example: 2
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    sprints:
                    - id: 1
                      board_id: 52
                      name: Ballarat
                      description: Nulla enim et. Rem ea itaque. Numquam incidunt
                        in.
                      started_at: '2023-01-12T18:31:03.915Z'
                      expected_end_at: '2023-01-19T18:31:03.915Z'
                      ended_at:
                      final_list_name: Done
                      custom_data: {}
                      url: http://www.example.com/api/sprints/1
                    - id: 2
                      board_id: 52
                      name: Nelson Bay
                      description: Blanditiis nihil voluptate. Eaque et eligendi.
                        Error et ut.
                      started_at: '2023-01-12T18:31:03.920Z'
                      expected_end_at: '2023-01-19T18:31:03.920Z'
                      ended_at:
                      final_list_name: Done
                      custom_data: {}
                      url: http://www.example.com/api/sprints/2
                    - id: 3
                      board_id: 52
                      name: Townsville
                      description: Voluptatibus repellat aut. Error consequatur officiis.
                        Ut exercitationem aut.
                      started_at: '2023-01-12T18:31:03.923Z'
                      expected_end_at: '2023-01-19T18:31:03.923Z'
                      ended_at:
                      final_list_name: Done
                      custom_data: {}
                      url: http://www.example.com/api/sprints/3
              schema:
                "$ref": "#/components/schemas/sprint_pages_response"
  "/api/sprints":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List sprints
      tags:
      - Sprints
      parameters:
      - name: page
        in: query
        required: false
        description: Decides which result page should be returned.
        example: 2
        schema:
          type: integer
      - name: per
        in: query
        required: false
        description: Decides how many entities should be returned per one page. **Works
          only, when `page` param is given.**
        example: 2
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    sprints: []
              schema:
                "$ref": "#/components/schemas/sprint_pages_response"
    post:
      summary: Create sprint
      tags:
      - Sprints
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 4
                    board_id: 53
                    name: New Sprint
                    description: Example description of new sprint
                    started_at: '2023-01-12T18:31:03.986Z'
                    expected_end_at: '2025-12-11T23:00:00.000Z'
                    ended_at:
                    final_list_name: Done
                    custom_data: {}
                    url: http://www.example.com/api/sprints/4
              schema:
                "$ref": "#/components/schemas/sprint_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/sprint_request"
  "/api/sprints/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    - name: tasks
      in: query
      example: all
      required: false
      schema:
        type: string
    get:
      summary: Show Sprint
      tags:
      - Sprints
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful with `tasks=all`:
                  summary: successful with `tasks=all`
                  value:
                    id: 5
                    board_id: 54
                    name: Canberra
                    description: Qui aliquam dolorem. Quo magnam quaerat. Animi enim
                      saepe.
                    started_at: '2023-01-12T18:31:03.995Z'
                    expected_end_at: '2023-01-19T18:31:03.995Z'
                    ended_at:
                    final_list_name: Done
                    custom_data: {}
                    url: http://www.example.com/api/sprints/5
                    tasks:
                    - id: 12
                      name: The Sign
                      priority: very_low
                      spent_time: 0
                      points: 4
                      added_at: '2023-01-12T18:31:04.025Z'
                      completed_at:
                      start_state: To Do
                      state: Doing
                successful:
                  summary: successful
                  value:
                    id: 6
                    board_id: 56
                    name: "Wagga\tWagga"
                    description: Dolore cumque illo. Et voluptate doloremque. Qui
                      numquam deserunt.
                    started_at: '2023-01-12T18:31:04.050Z'
                    expected_end_at: '2023-01-19T18:31:04.051Z'
                    ended_at:
                    final_list_name: Done
                    custom_data: {}
                    url: http://www.example.com/api/sprints/6
              schema:
                "$ref": "#/components/schemas/sprint_response"
    put:
      summary: Update Sprint
      tags:
      - Sprints
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 7
                    board_id: 57
                    name: New Name
                    description: Optio enim est. Deleniti mollitia alias. Corporis
                      quo dolorum.
                    started_at: '2023-01-12T18:31:04.075Z'
                    expected_end_at: '2023-01-19T18:31:04.075Z'
                    ended_at:
                    final_list_name: Done
                    custom_data: {}
                    url: http://www.example.com/api/sprints/7
              schema:
                "$ref": "#/components/schemas/sprint_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/sprint_request"
    delete:
      summary: Delete sprint
      tags:
      - Sprints
      responses:
        '204':
          description: successful
  "/api/sprints/{id}/end":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    put:
      summary: End sprint
      tags:
      - Sprints
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 9
                    board_id: 59
                    name: Launceston
                    description: Id provident laborum. Eveniet dolores ad. Dolorem
                      et iure.
                    started_at: '2023-01-12T18:31:04.134Z'
                    expected_end_at: '2023-01-19T18:31:04.134Z'
                    ended_at: '2023-01-12T18:31:04.154Z'
                    final_list_name: Done
                    custom_data: {}
                    url: http://www.example.com/api/sprints/9
              schema:
                "$ref": "#/components/schemas/sprint_response"
  "/api/boards/{id}/active_sprint":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show active sprint
      tags:
      - Sprints
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 10
                    board_id: 60
                    name: Gladstone – Tannum Sands
                    description: Consequatur est reprehenderit. Laudantium necessitatibus
                      velit. Laudantium sapiente inventore.
                    started_at: '2023-01-12T18:31:04.167Z'
                    expected_end_at: '2023-01-19T18:31:04.167Z'
                    ended_at:
                    final_list_name: Done
                    custom_data: {}
                    url: http://www.example.com/api/sprints/10
              schema:
                "$ref": "#/components/schemas/sprint_response"
  "/api/sprints/{id}/burn_up_chart":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show data for burn up chart
      tags:
      - Sprints
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                  - name: Work Scope
                    data:
                      '2023-01-12': 0
                      '2023-01-19': 0
                  - name: Completed Work
                    data:
                      '2023-01-12': 0
                      '2023-01-19':
  "/api/boards/{id}/tags":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Board id
      required: true
      schema:
        type: string
    get:
      summary: List board's tags
      tags:
      - Tags
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                  - id: 6
                    name: Marketing
                    colour: "#f7f7bb"
                    url: http://www.example.com/api/tags/6
                    board_id: 62
                    created_at: '2023-01-12T18:31:04.226Z'
                    updated_at: '2023-01-12T18:31:04.226Z'
                    custom_data: {}
                  - id: 7
                    name: Retail
                    colour: "#141401"
                    url: http://www.example.com/api/tags/7
                    board_id: 62
                    created_at: '2023-01-12T18:31:04.227Z'
                    updated_at: '2023-01-12T18:31:04.227Z'
                    custom_data: {}
                  - id: 8
                    name: Real-Estate
                    colour: "#ececfe"
                    url: http://www.example.com/api/tags/8
                    board_id: 62
                    created_at: '2023-01-12T18:31:04.229Z'
                    updated_at: '2023-01-12T18:31:04.229Z'
                    custom_data: {}
                  - id: 9
                    name: Hospitality
                    colour: "#152828"
                    url: http://www.example.com/api/tags/9
                    board_id: 62
                    created_at: '2023-01-12T18:31:04.231Z'
                    updated_at: '2023-01-12T18:31:04.231Z'
                    custom_data: {}
                  - id: 10
                    name: Advertising
                    colour: "#e0e0f5"
                    url: http://www.example.com/api/tags/10
                    board_id: 62
                    created_at: '2023-01-12T18:31:04.232Z'
                    updated_at: '2023-01-12T18:31:04.232Z'
                    custom_data: {}
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/tag_response"
    post:
      summary: Create tag
      tags:
      - Tags
      parameters:
      - name: id
        in: path
        description: Board id
        required: true
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 11
                    name: New Tag
                    colour: "#fff000"
                    url: http://www.example.com/api/tags/11
                    board_id: 63
                    created_at: '2023-01-12T18:31:04.271Z'
                    updated_at: '2023-01-12T18:31:04.271Z'
                    custom_data: {}
              schema:
                "$ref": "#/components/schemas/tag_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/tag_request"
  "/api/tags":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    post:
      summary: Create tag
      tags:
      - Tags
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 12
                    name: New Tag
                    colour: "#fff000"
                    url: http://www.example.com/api/tags/12
                    board_id: 64
                    created_at: '2023-01-12T18:31:04.309Z'
                    updated_at: '2023-01-12T18:31:04.309Z'
                    custom_data: {}
              schema:
                "$ref": "#/components/schemas/tag_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/tag_request"
  "/api/tasks/{id}/tags":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Task id
      required: true
      schema:
        type: string
    get:
      summary: List task's tags
      tags:
      - Tags
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                  - id: 13
                    name: Real-Estate
                    colour: "#040416"
                    url: http://www.example.com/api/tags/13
                    board_id: 65
                    created_at: '2023-01-12T18:31:04.330Z'
                    updated_at: '2023-01-12T18:31:04.330Z'
                    custom_data: {}
                  - id: 14
                    name: Retail
                    colour: "#a5d9a5"
                    url: http://www.example.com/api/tags/14
                    board_id: 65
                    created_at: '2023-01-12T18:31:04.333Z'
                    updated_at: '2023-01-12T18:31:04.333Z'
                    custom_data: {}
                  - id: 15
                    name: Real-Estate
                    colour: "#8a3d3d"
                    url: http://www.example.com/api/tags/15
                    board_id: 65
                    created_at: '2023-01-12T18:31:04.336Z'
                    updated_at: '2023-01-12T18:31:04.336Z'
                    custom_data: {}
                  - id: 16
                    name: Government
                    colour: "#4141d8"
                    url: http://www.example.com/api/tags/16
                    board_id: 65
                    created_at: '2023-01-12T18:31:04.339Z'
                    updated_at: '2023-01-12T18:31:04.339Z'
                    custom_data: {}
                  - id: 17
                    name: IT
                    colour: "#d572d5"
                    url: http://www.example.com/api/tags/17
                    board_id: 65
                    created_at: '2023-01-12T18:31:04.341Z'
                    updated_at: '2023-01-12T18:31:04.341Z'
                    custom_data: {}
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/tag_response"
    post:
      summary: Create tag (associated with given task and task's board)
      tags:
      - Tags
      parameters:
      - name: id
        in: path
        description: Task id
        required: true
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 18
                    name: New Tag
                    colour: "#fff000"
                    url: http://www.example.com/api/tags/18
                    board_id: 66
                    created_at: '2023-01-12T18:31:04.428Z'
                    updated_at: '2023-01-12T18:31:04.428Z'
                    custom_data: {}
              schema:
                "$ref": "#/components/schemas/tag_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/tag_request"
  "/api/tags/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show Tags
      tags:
      - Tags
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 19
                    name: Manufacturing
                    colour: "#bd6bbd"
                    url: http://www.example.com/api/tags/19
                    board_id: 67
                    created_at: '2023-01-12T18:31:04.440Z'
                    updated_at: '2023-01-12T18:31:04.440Z'
                    custom_data: {}
              schema:
                "$ref": "#/components/schemas/tag_response"
    put:
      summary: Update Tag
      tags:
      - Tags
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 20
                    name: New Name
                    colour: "#0f6c0f"
                    url: http://www.example.com/api/tags/20
                    board_id: 68
                    created_at: '2023-01-12T18:31:04.468Z'
                    updated_at: '2023-01-12T18:31:04.488Z'
                    custom_data: {}
              schema:
                "$ref": "#/components/schemas/tag_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/tag_request"
    delete:
      summary: Delete tag
      tags:
      - Tags
      responses:
        '204':
          description: successful
  "/api/tasks":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List tasks
      tags:
      - Tasks
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                  - id: 16
                    name: Sgt. Pepper's Lonely Hearts Club Band
                    pos: 65536.0
                    priority: low
                    spent_time: 0
                    points: 3
                    due_time: '2023-01-19T18:31:04.520Z'
                    list_id: 33
                    deleted_at:
                    url: http://www.example.com/api/tasks/16
                    list_url: http://www.example.com/api/lists/33
                    description: "# Sed\nMaxime cumque sit. Ut quis qui. Ut nemo nesciunt.\n0.
                      Dignissimos. \n1. Dolorum. \n2. Maiores. \n3. Harum. \n4. Ut.
                      \n5. Ut. \n6. Eos. \n7. Deleniti. \n8. Iure. \n9. Expedita.
                      \n"
                    created_at: '2023-01-12T18:31:04.529Z'
                    updated_at: '2023-01-12T18:31:04.529Z'
                  - id: 17
                    name: All We Know Is Falling
                    pos: 65536.0
                    priority: very_low
                    spent_time: 0
                    points: 1
                    due_time: '2023-01-19T18:31:04.531Z'
                    list_id: 34
                    deleted_at:
                    url: http://www.example.com/api/tasks/17
                    list_url: http://www.example.com/api/lists/34
                    description: |-
                      ##### Voluptas
                      Sed soluta delectus. Nam dolorem quia. Nostrum illo blanditiis. Qui mollitia inventore. Debitis in molestiae.
                      ```ruby
                      Deleniti.
                      ```
                    created_at: '2023-01-12T18:31:04.540Z'
                    updated_at: '2023-01-12T18:31:04.540Z'
                  - id: 18
                    name: Hybrid Theory
                    pos: 65536.0
                    priority: low
                    spent_time: 0
                    points: 5
                    due_time: '2023-01-19T18:31:04.542Z'
                    list_id: 35
                    deleted_at:
                    url: http://www.example.com/api/tasks/18
                    list_url: http://www.example.com/api/lists/35
                    description: |-
                      ###### Est
                      Commodi enim dolorem. Et eos ullam. Qui ea sint. Dolores autem cumque. Ipsam dolor molestiae. Error voluptas id.
                      ###### Sit
                      Velit aut laborum. Necessitatibus sit assumenda. Id est laborum.
                      ## Beatae
                    created_at: '2023-01-12T18:31:04.551Z'
                    updated_at: '2023-01-12T18:31:04.551Z'
                  - id: 19
                    name: 'Gold: Greatest Hits'
                    pos: 65536.0
                    priority: high
                    spent_time: 0
                    points: 1
                    due_time: '2023-01-19T18:31:04.554Z'
                    list_id: 36
                    deleted_at:
                    url: http://www.example.com/api/tasks/19
                    list_url: http://www.example.com/api/lists/36
                    description: "### Deserunt\nRerum aliquam eum. In est est. Nam
                      asperiores cumque. Sed ut ut. Quasi similique dolorum. Soluta
                      recusandae vero.\n* Voluptatum. \n* Alias. \n* Sit. \n* Dignissimos.
                      \n* Pariatur. \n* Enim. \n* Aspernatur. \n"
                    created_at: '2023-01-12T18:31:04.562Z'
                    updated_at: '2023-01-12T18:31:04.562Z'
                  - id: 20
                    name: No Jacket Required
                    pos: 65536.0
                    priority: medium
                    spent_time: 0
                    points: 3
                    due_time: '2023-01-19T18:31:04.564Z'
                    list_id: 37
                    deleted_at:
                    url: http://www.example.com/api/tasks/20
                    list_url: http://www.example.com/api/lists/37
                    description: |-
                      #### Voluptas
                      Ipsam ea omnis. Dolorum ea nostrum. Dolorum fugit consequuntur. Deserunt architecto et. Adipisci iste voluptas. Fugiat accusamus quia.
                      ```ruby
                      Quia.
                      ```
                    created_at: '2023-01-12T18:31:04.573Z'
                    updated_at: '2023-01-12T18:31:04.573Z'
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/task_response"
    post:
      summary: Create Task
      tags:
      - Tasks
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 21
                    name: New Task
                    pos: 65536.0
                    priority:
                    spent_time: 0
                    points:
                    due_time:
                    list_id: 38
                    deleted_at:
                    url: http://www.example.com/api/tasks/21
                    list_url: http://www.example.com/api/lists/38
                    description:
                    created_at: '2023-01-12T18:31:04.618Z'
                    updated_at: '2023-01-12T18:31:04.618Z'
              schema:
                "$ref": "#/components/schemas/task_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/task_request"
  "/api/tasks/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Task id
      required: true
      schema:
        type: string
    get:
      summary: Show Taks
      parameters:
      - name: include_associations
        in: query
        required: false
        description: If true, extended object with all associations is returned.
        schema:
          type: string
      tags:
      - Tasks
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful with `include_associations=true`:
                  summary: successful with `include_associations=true`
                  value:
                    id: 22
                    name: The Bodyguard
                    pos: 65536.0
                    priority: very_low
                    spent_time: 0
                    points: 1
                    due_time: '2023-01-19T18:31:04.625Z'
                    list_id: 39
                    deleted_at:
                    url: http://www.example.com/api/tasks/22
                    list_url: http://www.example.com/api/lists/39
                    description: |-
                      #### Quod
                      Est vero et. Quis eos repellendus. Earum fugiat quia.
                      # Iusto
                    created_at: '2023-01-12T18:31:04.633Z'
                    updated_at: '2023-01-12T18:31:04.633Z'
                    list:
                      id: 39
                      name: raspberry
                      pos: 65536.0
                      visible: false
                      deleted_at:
                      board_id: 76
                      created_at: '2023-01-12T18:31:04.628Z'
                      updated_at: '2023-01-12T18:31:04.628Z'
                      custom_data: {}
                      url: http://www.example.com/api/lists/39
                      board_url: http://www.example.com/api/boards/76
                    author:
                      id: 145
                      name: Dierdre Howe
                      avatar_url: https://www.gravatar.com/avatar/7fb81d590ade6a2f128aeaa2e3f984bd
                      role: developer
                      url: http://www.example.com/api/users/145
                      email: dierdre_howe.1673548264@example.com
                      created_at: '2023-01-12T18:31:04.631Z'
                      updated_at: '2023-01-12T18:31:04.631Z'
                      custom_data: {}
                    users:
                    - id: 146
                      name: Rep. Madelaine Klein
                      avatar_url: https://www.gravatar.com/avatar/1c7f646386574329e1f689af15c2926f
                      role: regular
                      url: http://www.example.com/api/users/146
                      email: rep_madelaine_klein.1673548264@example.com
                      created_at: '2023-01-12T18:31:04.636Z'
                      updated_at: '2023-01-12T18:31:04.636Z'
                      custom_data: {}
                    - id: 147
                      name: Olene Johns
                      avatar_url: https://www.gravatar.com/avatar/a4d532325d3f61f2dc8d590a67f93e17
                      role: manager
                      url: http://www.example.com/api/users/147
                      email: olene_johns.1673548264@example.com
                      created_at: '2023-01-12T18:31:04.641Z'
                      updated_at: '2023-01-12T18:31:04.641Z'
                      custom_data: {}
                    tags:
                    - id: 22
                      name: Banking
                      colour: "#e5f5e5"
                      url: http://www.example.com/api/tags/22
                      board_id: 77
                      created_at: '2023-01-12T18:31:04.646Z'
                      updated_at: '2023-01-12T18:31:04.646Z'
                      custom_data: {}
                    - id: 23
                      name: Legal
                      colour: "#0ff50f"
                      url: http://www.example.com/api/tags/23
                      board_id: 78
                      created_at: '2023-01-12T18:31:04.651Z'
                      updated_at: '2023-01-12T18:31:04.651Z'
                      custom_data: {}
                    - id: 24
                      name: Sales
                      colour: "#adadae"
                      url: http://www.example.com/api/tags/24
                      board_id: 79
                      created_at: '2023-01-12T18:31:04.656Z'
                      updated_at: '2023-01-12T18:31:04.656Z'
                      custom_data: {}
                successful:
                  summary: successful
                  value:
                    id: 23
                    name: Music Box
                    pos: 65536.0
                    priority: very_low
                    spent_time: 0
                    points: 1
                    due_time: '2023-01-19T18:31:04.682Z'
                    list_id: 40
                    deleted_at:
                    url: http://www.example.com/api/tasks/23
                    list_url: http://www.example.com/api/lists/40
                    description: |-
                      ##### Ut
                      Qui sit cupiditate. Vel eos voluptatem. Placeat veritatis sed. Reiciendis neque consequuntur. Optio quod tenetur.
                      Corrupti provident nostrum. Facilis beatae id. _Harum_ est omnis.
                    created_at: '2023-01-12T18:31:04.690Z'
                    updated_at: '2023-01-12T18:31:04.690Z'
              schema:
                "$ref": "#/components/schemas/task_response"
    put:
      summary: Update Task
      tags:
      - Tasks
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 24
                    name: New Name
                    pos: 65536.0
                    priority: very_low
                    spent_time: 0
                    points: 1
                    due_time: '2023-01-19T18:31:04.709Z'
                    list_id: 41
                    deleted_at:
                    url: http://www.example.com/api/tasks/24
                    list_url: http://www.example.com/api/lists/41
                    description: "#### Voluptatem\nVeniam voluptatem corrupti. Aut
                      ut qui. Illum qui eligendi.\n0. Officiis. \n1. Doloremque. \n2.
                      Consequatur. \n3. Id. \n4. Beatae. \n"
                    created_at: '2023-01-12T18:31:04.717Z'
                    updated_at: '2023-01-12T18:31:04.734Z'
              schema:
                "$ref": "#/components/schemas/task_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/task_request"
    delete:
      summary: Delete Task
      tags:
      - Tasks
      responses:
        '204':
          description: successful
  "/api/tasks/{id}/add_time":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Task id
      required: true
      schema:
        type: string
    put:
      summary: Add time
      tags:
      - Tasks
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 26
                    name: Riot!
                    pos: 65536.0
                    priority: very_high
                    spent_time: 1200
                    points: 4
                    due_time: '2023-01-19T18:31:04.768Z'
                    list_id: 43
                    deleted_at:
                    url: http://www.example.com/api/tasks/26
                    list_url: http://www.example.com/api/lists/43
                    description: "##### Saepe\nFugit officia velit. Ea rem rerum.
                      Temporibus in eaque.\n0. Omnis. \n1. Totam. \n2. Id. \n3. Sint.
                      \n4. Omnis. \n5. Aspernatur. \n6. Necessitatibus. \n7. Qui.
                      \n8. Cum. \n9. Debitis. \n"
                    created_at: '2023-01-12T18:31:04.776Z'
                    updated_at: '2023-01-12T18:31:04.791Z'
        '422':
          description: non integer time
          content:
            application/json:
              examples:
                incorrect unit:
                  summary: incorrect unit
                  value:
                    unit:
                    - is not included in the list
                negative time:
                  summary: negative time
                  value:
                    time:
                    - must be greater than 0
                non integer time:
                  summary: non integer time
                  value:
                    time:
                    - must be greater than 0
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                time:
                  type: integer
                unit:
                  type: string
                  enum: "#<Set: {:day, :hour, :minute, :second}>"
  "/api/tasks/{id}/attach_tag":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Task id
      required: true
      schema:
        type: string
    post:
      summary: Attach Tag
      tags:
      - Tasks
      parameters: []
      responses:
        '204':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_id:
                  type: integer
  "/api/tasks/{id}/detach_tag":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Task id
      required: true
      schema:
        type: string
    post:
      summary: Detach Tag
      tags:
      - Tasks
      parameters: []
      responses:
        '204':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_id:
                  type: integer
  "/api/tasks/{id}/assign_user":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Task id
      required: true
      schema:
        type: string
    post:
      summary: Assign User
      tags:
      - Tasks
      parameters: []
      responses:
        '204':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
  "/api/tasks/{id}/unassign_user":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Task id
      required: true
      schema:
        type: string
    post:
      summary: Unassign User
      tags:
      - Tasks
      parameters: []
      responses:
        '204':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
  "/api/ui_script_triggers":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    post:
      summary: Create ui script trigger
      tags:
      - UI Script triggers
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 2
                    script_id: 18
                    subject_type: DB::Task
                    subject_id: 34
                    scope_type:
                    scope_id:
                    author_id: 176
                    delay: 1
                    private: false
                    colour: "#ffffff"
                    text: click me
                    url: http://www.example.com/api/ui_script_triggers/2
              schema:
                "$ref": "#/components/schemas/ui_script_trigger_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ui_script_trigger_request"
  "/api/ui_script_triggers/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show ui script trigger
      tags:
      - UI Script triggers
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 3
                    script_id: 19
                    subject_type:
                    subject_id:
                    scope_type:
                    scope_id:
                    author_id: 180
                    delay:
                    private:
                    colour: "#ffffff"
                    text: Send a message
                    url: http://www.example.com/api/ui_script_triggers/3
              schema:
                "$ref": "#/components/schemas/ui_script_trigger_response"
    put:
      summary: Update ui script trigger
      tags:
      - UI Script triggers
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 4
                    script_id: 20
                    subject_type:
                    subject_id:
                    scope_type:
                    scope_id:
                    author_id: 184
                    delay:
                    private:
                    colour: "#ffffff"
                    text: Send a message
                    url: http://www.example.com/api/ui_script_triggers/4
              schema:
                "$ref": "#/components/schemas/ui_script_trigger_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ui_script_trigger_request"
    delete:
      summary: Delete ui_script_trigger
      tags:
      - UI Script triggers
      responses:
        '204':
          description: successful
  "/api/ui_script_triggers/{id}/executions":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    post:
      summary: Execute script connected with ui script trigger
      tags:
      - UI Script triggers
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      responses:
        '201':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ui_script_trigger_execution_request"
  "/api/tasks/{id}/ui_script_triggers":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List ui script triggers of a single task
      tags:
      - UI Script triggers
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ui_script_trigger_response"
  "/api/boards/{id}/ui_script_triggers":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List ui script triggers of a single board
      tags:
      - UI Script triggers
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ui_script_trigger_response"
  "/api/workspaces/{id}/ui_script_triggers":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List ui script triggers of a single workspace
      tags:
      - UI Script triggers
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ui_script_trigger_response"
  "/api/users/current/ui_script_triggers":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List global ui script triggers of the current user
      tags:
      - UI Script triggers
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ui_script_trigger_response"
  "/api/workspaces/{id}/users":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List users of workspace
      tags:
      - Users
      parameters:
      - name: id
        in: path
        description: Workspace id
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: Decides which result page should be returned.
        example: 2
        schema:
          type: integer
      - name: role
        in: query
        required: false
        schema:
          "$ref": "#/components/schemas/user_request/properties/role"
        example: admin
      - name: created_at_from
        in: query
        required: false
        description: Date with format YYYY.MM.DD
        example: 2010.01.25
        schema:
          type: string
      - name: created_at_to
        in: query
        required: false
        description: Date with format YYYY.MM.DD
        example: 2010.01.25
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Searches for users by name and e-mail.
        example: michael
        schema:
          type: string
      - name: per
        in: query
        required: false
        description: Decides how many entities should be returned per one page. **Works
          only, when `page` param is given.**
        example: 2
        schema:
          type: integer
      - name: limit
        in: query
        required: false
        description: Decides how many entities should be returned.
        example: 3
        schema:
          type: integer
      responses:
        '200':
          description: successful with pages
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    users:
                    - id: 209
                      name: Tamara Bechtelar
                      avatar_url: https://www.gravatar.com/avatar/3a8cb7dc7f956bc39b63533f33da8ada
                      role: regular
                      url: http://www.example.com/api/users/209
                      email: tamara_bechtelar.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.306Z'
                      updated_at: '2023-01-12T18:31:05.306Z'
                      custom_data: {}
                    - id: 210
                      name: Daren Nitzsche
                      avatar_url: https://www.gravatar.com/avatar/9dfe4e2ba783ef8547aadafeda82688d
                      role: guest
                      url: http://www.example.com/api/users/210
                      email: daren_nitzsche.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.317Z'
                      updated_at: '2023-01-12T18:31:05.317Z'
                      custom_data: {}
                    - id: 211
                      name: Myong Boehm V
                      avatar_url: https://www.gravatar.com/avatar/77ba39129217f93ed24293e2105e86af
                      role: guest
                      url: http://www.example.com/api/users/211
                      email: myong_boehm_v.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.323Z'
                      updated_at: '2023-01-12T18:31:05.323Z'
                      custom_data: {}
                successful with pages:
                  summary: successful with pages
                  value:
                    users:
                    - id: 213
                      name: Leticia Douglas
                      avatar_url: https://www.gravatar.com/avatar/2a41adb02610bc07f4e36a496f4f7035
                      role: developer
                      url: http://www.example.com/api/users/213
                      email: leticia_douglas.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.348Z'
                      updated_at: '2023-01-12T18:31:05.348Z'
                      custom_data: {}
                    - id: 214
                      name: Dodie Romaguera
                      avatar_url: https://www.gravatar.com/avatar/70b3597ee33335428607eecf43008558
                      role: manager
                      url: http://www.example.com/api/users/214
                      email: dodie_romaguera.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.353Z'
                      updated_at: '2023-01-12T18:31:05.353Z'
                      custom_data: {}
                    - id: 215
                      name: Markita Baumbach
                      avatar_url: https://www.gravatar.com/avatar/48a68e7bc995a9deedd1a832a35e97d1
                      role: manager
                      url: http://www.example.com/api/users/215
                      email: markita_baumbach.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.358Z'
                      updated_at: '2023-01-12T18:31:05.358Z'
                      custom_data: {}
                    total_pages: 1
              schema:
                "$ref": "#/components/schemas/user_pages_response"
  "/api/users":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: List users
      tags:
      - Users
      parameters:
      - name: role_collection
        in: query
        schema:
          type: array
          items:
            "$ref": "#/components/schemas/user_request/properties/role"
        example:
        - admin
      - name: role
        in: query
        required: false
        schema:
          "$ref": "#/components/schemas/user_request/properties/role"
        example: admin
      - name: created_at_from
        in: query
        required: false
        description: Date with format YYYY.MM.DD
        example: 2010.01.25
        schema:
          type: string
      - name: created_at_to
        in: query
        required: false
        description: Date with format YYYY.MM.DD
        example: 2010.01.25
        schema:
          type: string
      - name: workspace_id
        in: query
        required: false
        example: 1
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Searches for users by name and e-mail.
        example: michael
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: Decides which result page should be returned.
        example: 2
        schema:
          type: integer
      - name: per
        in: query
        required: false
        description: Decides how many entities should be returned per one page. **Works
          only, when `page` param is given.**
        example: 2
        schema:
          type: integer
      - name: limit
        in: query
        required: false
        description: Decides how many entities should be returned.
        example: 3
        schema:
          type: integer
      responses:
        '200':
          description: successful with pages
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    users:
                    - id: 217
                      name: Werner Dickinson
                      avatar_url: https://www.gravatar.com/avatar/a392032ef5fa346403b350d00bae6050
                      role: guest
                      url: http://www.example.com/api/users/217
                      email: werner_dickinson.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.380Z'
                      updated_at: '2023-01-12T18:31:05.380Z'
                      custom_data: {}
                    - id: 218
                      name: Bradly Upton
                      avatar_url: https://www.gravatar.com/avatar/e372aec48ee6771d775b4c2026c3002b
                      role: developer
                      url: http://www.example.com/api/users/218
                      email: bradly_upton.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.383Z'
                      updated_at: '2023-01-12T18:31:05.383Z'
                      custom_data: {}
                    - id: 219
                      name: Wade Hackett DC
                      avatar_url: https://www.gravatar.com/avatar/15d671f5e1e2c3586f571f487ce820e3
                      role: manager
                      url: http://www.example.com/api/users/219
                      email: wade_hackett_dc.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.386Z'
                      updated_at: '2023-01-12T18:31:05.386Z'
                      custom_data: {}
                    - id: 220
                      name: Marlyn Larkin
                      avatar_url: https://www.gravatar.com/avatar/b203b206a74b713f9b85e613633797d4
                      role: guest
                      url: http://www.example.com/api/users/220
                      email: marlyn_larkin.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.389Z'
                      updated_at: '2023-01-12T18:31:05.389Z'
                      custom_data: {}
                    - id: 221
                      name: Guadalupe Barrows
                      avatar_url: https://www.gravatar.com/avatar/1971edb8852abdb75d2b732f8ea8f686
                      role: guest
                      url: http://www.example.com/api/users/221
                      email: guadalupe_barrows.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.392Z'
                      updated_at: '2023-01-12T18:31:05.392Z'
                      custom_data: {}
                    - id: 222
                      name: Tristan Wiza
                      avatar_url: https://www.gravatar.com/avatar/e99bb1114691bfde188fb7f096bf6051
                      role: admin
                      url: http://www.example.com/api/users/222
                      email: tristan_wiza.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.395Z'
                      updated_at: '2023-01-12T18:31:05.395Z'
                      custom_data: {}
                successful with pages:
                  summary: successful with pages
                  value:
                    users:
                    - id: 223
                      name: Bradly Trantow
                      avatar_url: https://www.gravatar.com/avatar/8fc5bcc4a048d3dea86fabbc4163ba2f
                      role: manager
                      url: http://www.example.com/api/users/223
                      email: bradly_trantow.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.412Z'
                      updated_at: '2023-01-12T18:31:05.412Z'
                      custom_data: {}
                    - id: 224
                      name: Juliet Aufderhar
                      avatar_url: https://www.gravatar.com/avatar/1194e5bb00c0fcd1806ee6ad226fd49f
                      role: manager
                      url: http://www.example.com/api/users/224
                      email: juliet_aufderhar.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.415Z'
                      updated_at: '2023-01-12T18:31:05.415Z'
                      custom_data: {}
                    - id: 225
                      name: The Hon. Eduardo Weber
                      avatar_url: https://www.gravatar.com/avatar/67f25b3a5e49e6ae6990791ee6c3e985
                      role: guest
                      url: http://www.example.com/api/users/225
                      email: the_hon_eduardo_weber.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.418Z'
                      updated_at: '2023-01-12T18:31:05.418Z'
                      custom_data: {}
                    - id: 226
                      name: Myles Torp
                      avatar_url: https://www.gravatar.com/avatar/d1f4898761bfe97a40d8fa3a361aca03
                      role: developer
                      url: http://www.example.com/api/users/226
                      email: myles_torp.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.421Z'
                      updated_at: '2023-01-12T18:31:05.421Z'
                      custom_data: {}
                    - id: 227
                      name: Madelyn Little
                      avatar_url: https://www.gravatar.com/avatar/e6b324a522e92fac0cd7eccb602e4f67
                      role: guest
                      url: http://www.example.com/api/users/227
                      email: madelyn_little.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.424Z'
                      updated_at: '2023-01-12T18:31:05.424Z'
                      custom_data: {}
                    - id: 228
                      name: Lonny Wintheiser
                      avatar_url: https://www.gravatar.com/avatar/86ada08682793dea89e6b99f7758fe21
                      role: admin
                      url: http://www.example.com/api/users/228
                      email: lonny_wintheiser.1673548265@example.com
                      created_at: '2023-01-12T18:31:05.428Z'
                      updated_at: '2023-01-12T18:31:05.428Z'
                      custom_data: {}
                    total_pages: 1
              schema:
                "$ref": "#/components/schemas/user_pages_response"
    post:
      summary: Create a user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 230
                    name: New User
                    created_at: '2023-01-12T18:31:05.459Z'
                    updated_at: '2023-01-12T18:31:05.459Z'
                    email: new_user@example.com
                    role: developer
                    deleted_at:
                    recent_boards: []
                    custom_data: {}
              schema:
                "$ref": "#/components/schemas/user_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user_request"
    put:
      summary: Update current user
      tags:
      - Users
      parameters: []
      responses:
        '204':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user_update_request"
    delete:
      summary: Delete current user
      tags:
      - Users
      responses:
        '204':
          description: successful
  "/api/users/current":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: Show the currently signed in user
      tags:
      - Users
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 233
                    name: Rickey Yundt
                    avatar_url: https://www.gravatar.com/avatar/fd75905405f1865bc6b71115f5dd6ca4
                    role: admin
                    url: http://www.example.com/api/users/233
                    email: rickey_yundt.1673548265@example.com
                    created_at: '2023-01-12T18:31:05.510Z'
                    updated_at: '2023-01-12T18:31:05.510Z'
                    custom_data: {}
              schema:
                "$ref": "#/components/schemas/user_response"
  "/api/users/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show a user
      tags:
      - Users
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 234
                    name: Denis Hegmann
                    avatar_url: https://www.gravatar.com/avatar/7214c9c895ee620eb73c3c785b5e3cdf
                    role: manager
                    url: http://www.example.com/api/users/234
                    email: denis_hegmann.1673548265@example.com
                    created_at: '2023-01-12T18:31:05.526Z'
                    updated_at: '2023-01-12T18:31:05.526Z'
                    custom_data: {}
              schema:
                "$ref": "#/components/schemas/user_response"
  "/api/users/sign_in":
    post:
      summary: Sign in
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 236
                    name: Deeann Rowe VM
                    created_at: '2023-01-12T18:31:05.545Z'
                    updated_at: '2023-01-12T18:31:05.545Z'
                    email: email@example.com
                    role: manager
                    deleted_at:
                    recent_boards: []
                    custom_data: {}
              schema:
                "$ref": "#/components/schemas/user_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user_sign_in_request"
  "/api/users/sign_out":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    delete:
      summary: Sign out
      tags:
      - Users
      responses:
        '204':
          description: successful
  "/api/workspaces":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    get:
      summary: list workspaces
      tags:
      - Workspaces
      security:
      - Bearer: {}
      parameters:
      - name: limit
        in: query
        description: Decides how many entities should be returned
        example: 3
        required: false
        schema:
          type: integer
      - name: boards
        in: query
        type: string
        schema:
          "$ref": "#/components/schemas/include_associated_enum"
        required: false
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful with `boards=all`:
                  summary: successful with `boards=all`
                  value:
                  - id: 100
                    name: Stim
                    created_at: '2023-01-12T18:31:05.586Z'
                    updated_at: '2023-01-12T18:31:05.586Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/100
                    boards:
                    - id: 97
                      name: Potassium
                      colour: "#206f6f"
                      workspace_id: 100
                      created_at: '2023-01-12T18:31:05.589Z'
                      updated_at: '2023-01-12T18:31:05.589Z'
                      deleted_at:
                      custom_data: {}
                      url: http://www.example.com/api/boards/97
                      workspace_url: http://www.example.com/api/workspaces/100
                    - id: 98
                      name: Titanium
                      colour: "#fdfded"
                      workspace_id: 100
                      created_at: '2023-01-12T18:31:05.590Z'
                      updated_at: '2023-01-12T18:31:05.590Z'
                      deleted_at:
                      custom_data: {}
                      url: http://www.example.com/api/boards/98
                      workspace_url: http://www.example.com/api/workspaces/100
                    - id: 99
                      name: Sulfur
                      colour: "#b6b65d"
                      workspace_id: 100
                      created_at: '2023-01-12T18:31:05.591Z'
                      updated_at: '2023-01-12T18:31:05.591Z'
                      deleted_at:
                      custom_data: {}
                      url: http://www.example.com/api/boards/99
                      workspace_url: http://www.example.com/api/workspaces/100
                    - id: 100
                      name: Mendelevium
                      colour: "#d8d874"
                      workspace_id: 100
                      created_at: '2023-01-12T18:31:05.594Z'
                      updated_at: '2023-01-12T18:31:05.594Z'
                      deleted_at:
                      custom_data: {}
                      url: http://www.example.com/api/boards/100
                      workspace_url: http://www.example.com/api/workspaces/100
                    - id: 101
                      name: Chromium
                      colour: "#6262bc"
                      workspace_id: 100
                      created_at: '2023-01-12T18:31:05.595Z'
                      updated_at: '2023-01-12T18:31:05.595Z'
                      deleted_at:
                      custom_data: {}
                      url: http://www.example.com/api/boards/101
                      workspace_url: http://www.example.com/api/workspaces/100
                  - id: 101
                    name: Ventosanzap
                    created_at: '2023-01-12T18:31:05.597Z'
                    updated_at: '2023-01-12T18:31:05.597Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/101
                    boards: []
                successful:
                  summary: successful
                  value:
                  - id: 102
                    name: Gembucket
                    created_at: '2023-01-12T18:31:05.624Z'
                    updated_at: '2023-01-12T18:31:05.624Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/102
                  - id: 103
                    name: Sonair
                    created_at: '2023-01-12T18:31:05.626Z'
                    updated_at: '2023-01-12T18:31:05.626Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/103
                  - id: 104
                    name: Greenlam
                    created_at: '2023-01-12T18:31:05.629Z'
                    updated_at: '2023-01-12T18:31:05.629Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/104
                  - id: 105
                    name: Lotstring
                    created_at: '2023-01-12T18:31:05.631Z'
                    updated_at: '2023-01-12T18:31:05.631Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/105
                  - id: 106
                    name: Zaam-Dox
                    created_at: '2023-01-12T18:31:05.634Z'
                    updated_at: '2023-01-12T18:31:05.634Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/106
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/workspace_response"
    post:
      summary: create workspace
      tags:
      - Workspaces
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 107
                    name: New Workspace
                    created_at: '2023-01-12T18:31:05.670Z'
                    updated_at: '2023-01-12T18:31:05.670Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/107
              schema:
                "$ref": "#/components/schemas/workspace_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/workspace_request"
  "/api/workspaces/{id}":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show workspace
      parameters:
      - name: boards
        in: query
        type: string
        schema:
          "$ref": "#/components/schemas/include_associated_enum"
        required: false
      tags:
      - Workspaces
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful with `boards=all`:
                  summary: successful with `boards=all`
                  value:
                    id: 108
                    name: Span
                    created_at: '2023-01-12T18:31:05.681Z'
                    updated_at: '2023-01-12T18:31:05.681Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/108
                    boards:
                    - id: 102
                      name: Francium
                      colour: "#da7cda"
                      workspace_id: 108
                      created_at: '2023-01-12T18:31:05.684Z'
                      updated_at: '2023-01-12T18:31:05.685Z'
                      deleted_at:
                      custom_data: {}
                      url: http://www.example.com/api/boards/102
                      workspace_url: http://www.example.com/api/workspaces/108
                    - id: 103
                      name: Iron
                      colour: "#0c220c"
                      workspace_id: 108
                      created_at: '2023-01-12T18:31:05.687Z'
                      updated_at: '2023-01-12T18:31:05.688Z'
                      deleted_at:
                      custom_data: {}
                      url: http://www.example.com/api/boards/103
                      workspace_url: http://www.example.com/api/workspaces/108
                successful:
                  summary: successful
                  value:
                    id: 111
                    name: Transcof
                    created_at: '2023-01-12T18:31:05.711Z'
                    updated_at: '2023-01-12T18:31:05.711Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/111
              schema:
                "$ref": "#/components/schemas/workspace_response"
    put:
      summary: update workspace
      tags:
      - Workspaces
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  summary: successful
                  value:
                    id: 112
                    name: New Name
                    created_at: '2023-01-12T18:31:05.731Z'
                    updated_at: '2023-01-12T18:31:05.744Z'
                    deleted_at:
                    custom_data: {}
                    url: http://www.example.com/api/workspaces/112
              schema:
                "$ref": "#/components/schemas/workspace_response"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/workspace_request"
    delete:
      summary: delete workspace
      tags:
      - Workspaces
      responses:
        '204':
          description: successful
  "/api/workspaces/{id}/assign_user":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Workspace id
      required: true
      schema:
        type: string
    post:
      summary: Assign User
      tags:
      - Workspaces
      parameters: []
      responses:
        '204':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
  "/api/workspaces/{id}/unassign_user":
    parameters:
    - name: Authorization
      in: header
      schema:
        "$ref": "#/components/schemas/authorization"
    - name: id
      in: path
      description: Workspace id
      required: true
      schema:
        type: string
    post:
      summary: Unassign User
      tags:
      - Workspaces
      parameters: []
      responses:
        '204':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
components:
  schemas:
    authorization:
      name: Authorization
      in: header
      type: string
      description: JWT token
      example: Bearer eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiZGV2ZWxvcGVyIiwic3ViIjoiMSIsInNjcCI6InVzZXIiLCJhdWQiOm51bGwsImlhdCI6MTY2NjE4MDIzMiwiZXhwIjoxNjY3NDc2MjMyLCJqdGkiOiJhMzdlZTA5MC0zZGJmLTRhMzgtOTFiNy1mZTJlM2FiYjlkY2QifQ.tGGjFHfMszfGCfNZS6I-hQNLSu_2Xfs3W4hI8IT4CW0
      required: true
    include_associated_enum:
      type: string
      enum:
      - visible
      - invisible
      - non-archived
      - archived
      - all
    lambdee_models_enum:
      type: string
      enum:
      - DB::User
      - DB::Workspace
      - DB::Board
      - DB::List
      - DB::Task
      - DB::Comment
      - DB::Tag
      - DB::Sprint
      - DB::UserWorkspace
      - DB::TaskUser
      - DB::TaskTag
      - DB::SprintTask
    lambdee_ui_script_triggers_subjects_enum:
      type: string
      enum:
      - DB::Workspace
      - DB::Board
      - DB::Task
    user_pages_response:
      type: object
      properties:
        users:
          type: array
          items:
            "$ref": "#components/schemas/user_response"
        total_pages:
          type: integer
      required:
      - users
    user_response:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date_time
        updated_at:
          type: string
          format: date_time
        avatar_url:
          type: string
        url:
          type: string
        role:
          type: string
      required:
      - id
      - name
    user_request:
      type: object
      properties:
        user:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
            role:
              type: string
              enum:
              - guest
              - regular
              - developer
              - admin
              - manager
      required:
      - name
      - email
    user_update_request:
      type: object
      properties:
        user:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
            current_password:
              type: string
            role:
              type: string
              enum:
              - guest
              - regular
              - developer
              - admin
              - manager
      required:
      - current_password
    user_sign_in_request:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
      required:
      - email
      - password
    comment_response:
      type: object
      properties:
        id:
          type: integer
        body:
          type: string
        deleted_at:
          type:
          - string
          - 'null'
          format: date_time
        author_id:
          type: integer
        task_id:
          type: integer
        created_at:
          type: string
          format: date_time
        updated_at:
          type: string
          format: date_time
        url:
          type: string
        users:
          type: array
          items:
            "$ref": "#/components/schemas/user_response"
          nullable: true
      required:
      - id
      - body
      - deleted_at
      - url
    tag_response:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        colour:
          type: string
        board_id:
          type: integer
        created_at:
          type: string
          format: date_time
        updated_at:
          type: string
          format: date_time
        url:
          type: string
        board_url:
          type: string
      required:
      - id
    tag_request:
      type: object
      properties:
        name:
          type: string
        colour:
          type: string
        board_id:
          type: integer
        task_id:
          type: integer
      required: []
    sprint_pages_response:
      type: object
      properties:
        sprints:
          type: array
          items:
            "$ref": "#components/schemas/sprint_response"
        total_pages:
          type: integer
      required:
      - sprints
    script_run_pages_response:
      type: object
      properties:
        runs:
          type: array
          items:
            "$ref": "#components/schemas/script_run_response"
        total_pages:
          type: integer
      required:
      - runs
    sprint_response:
      type: object
      properties:
        id:
          type: integer
        board_id:
          type: integer
        name:
          type: string
        description:
          type:
          - string
          - 'null'
        started_at:
          type: string
          format: date_time
        expected_end_at:
          type: string
          format: date_time
        ended_at:
          type:
          - string
          - 'null'
          format: date_time
        final_list_name:
          type: string
        url:
          type: string
        tasks:
          type: array
          items:
            "$ref": "#/components/schemas/task_with_sprint_task_response"
          nullable: true
      required:
      - id
      - name
    task_with_sprint_task_response:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        priority:
          type: string
        spent_time:
          type: integer
        points:
          type: integer
        added_at:
          type: string
          format: date_time
        completed_at:
          type:
          - string
          - 'null'
          format: date_time
        start_state:
          type: string
        state:
          type: string
      required:
      - id
    sprint_request:
      type: object
      properties:
        board_id:
          type: integer
        name:
          type: string
        description:
          type: string
        started_at:
          type: string
          format: date_time
          example: '2025-12-11T23:00:00'
        expected_end_at:
          type: string
          format: date_time
          example: '2025-12-18T23:00:00'
      required:
      - name
      - expected_end_at
    task_response:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type:
          - string
          - 'null'
        due_time:
          type:
          - string
          - 'null'
          format: date_time
        pos:
          type:
          - number
          - 'null'
          format: float
        priority:
          type:
          - string
          - 'null'
        points:
          type:
          - number
          - 'null'
          format: float
        created_at:
          type: string
          format: date_time
        updated_at:
          type: string
          format: date_time
        deleted_at:
          type:
          - string
          - 'null'
          format: date_time
        list_id:
          type: integer
        list_url:
          type: string
        url:
          type: string
        users:
          type: array
          items:
            "$ref": "#/components/schemas/user_response"
          nullable: true
        tags:
          type: array
          items:
            "$ref": "#/components/schemas/tag_response"
          nullable: true
        author:
          type: object
          schema:
            "$ref": "#/components/schemas/user_response"
          nullable: true
      required:
      - id
      - name
      - pos
      - priority
      - points
      - list_id
      - deleted_at
    task_request:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        due_time:
          type: string
          format: date_time
          example: '2025-12-18T23:00:00'
        pos:
          type: number
          format: float
          description: If not given, value will be set as for the last item in the
            list.
        priority:
          type: string
          enum:
          - very_low
          - low
          - medium
          - high
          - very_high
        points:
          type: number
          format: float
        list_id:
          type: integer
        author_id:
          type: integer
      required:
      - name
      - list_id
      - author_id
    list_response:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        pos:
          type: number
          format: float
        visible:
          type:
          - boolean
          - 'null'
        deleted_at:
          type:
          - string
          - 'null'
          format: date_time
        board_id:
          type: integer
        created_at:
          type: string
          format: date_time
        updated_at:
          type: string
          format: date_time
        url:
          type: string
        board_url:
          type: string
        tasks:
          type: array
          items:
            "$ref": "#/components/schemas/task_response"
          nullable: true
      required:
      - id
      - name
      - pos
      - visible
      - board_id
      - created_at
      - updated_at
      - deleted_at
    list_request:
      type: object
      properties:
        name:
          type: string
        pos:
          type: number
          format: float
        visible:
          type: boolean
        board_id:
          type: integer
      required:
      - name
      - board_id
    board_response:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        workspace_id:
          type: integer
        created_at:
          type: string
          format: date_time
        updated_at:
          type: string
          format: date_time
        deleted_at:
          type:
          - string
          - 'null'
          format: date_time
        url:
          type: string
        workspace_url:
          type: string
        lists:
          type: array
          items:
            "$ref": "#/components/schemas/list_response"
          nullable: true
      required:
      - id
      - name
      - workspace_id
      - created_at
      - updated_at
      - deleted_at
    board_request:
      type: object
      properties:
        name:
          type: string
        workspace_id:
          type: integer
      required:
      - name
      - workspace_id
    workspace_response:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          type: string
          format: date_time
        updated_at:
          type: string
          format: date_time
        deleted_at:
          type:
          - string
          - 'null'
          format: date_time
        url:
          type: string
        boards:
          type: array
          items:
            "$ref": "#/components/schemas/board_response"
          nullable: true
      required:
      - id
      - name
      - created_at
      - updated_at
      - deleted_at
    workspace_request:
      type: object
      properties:
        name:
          type: string
      required:
      - name
    script_response:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        content:
          type: string
        url:
          type: string
        script_triggers:
          type: array
          items:
            "$ref": "#/components/schemas/nested_script_trigger_response"
        ui_script_triggers:
          type: array
          items:
            "$ref": "#/components/schemas/ui_script_trigger_response"
      required: []
    script_request:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        content:
          type: string
        script_triggers_attributes:
          type: array
          items:
            "$ref": "#/components/schemas/nested_script_trigger_request"
      required:
      - name
    nested_script_trigger_response:
      type: object
      properties:
        id:
          type: integer
        script_id:
          type:
          - integer
          - 'null'
        subject_type:
          type:
          - string
          - 'null'
        subject_id:
          type:
          - integer
          - 'null'
        action:
          type: string
        delay:
          type:
          - integer
          - 'null'
        url:
          type: string
      required: []
    nested_script_trigger_request:
      type: object
      properties:
        id:
          type: integer
          description: Needed only for updates and destroys.
        script_id:
          type: integer
        subject_type:
          "$ref": "#/components/schemas/lambdee_models_enum"
        subject_id:
          type: integer
        action:
          type: string
          enum:
          - create
          - update
          - destroy
        delay:
          type:
          - integer
          - 'null'
          description: Number of seconds of script execution delay
        _destroy:
          type: boolean
          description: If `true` callback for given `id` will be destroyed. Works
            only nested in sprint.
      required:
      - action
    script_trigger_response:
      type: object
      properties:
        id:
          type: integer
        script_id:
          type: integer
        subject_type:
          type:
          - string
          - 'null'
        subject_id:
          type:
          - integer
          - 'null'
        action:
          type: string
        delay:
          type:
          - integer
          - 'null'
        url:
          type: string
      required: []
    script_trigger_request:
      type: object
      properties:
        script_id:
          type: integer
        subject_type:
          "$ref": "#/components/schemas/lambdee_models_enum"
        subject_id:
          type: integer
        action:
          type: string
        delay:
          type:
          - integer
          - 'null'
          description: Number of seconds of script execution delay
      required:
      - script_id
      - action
    ui_script_trigger_response:
      type: object
      properties:
        id:
          type: integer
        script_id:
          type: integer
        subject_type:
          type:
          - string
          - 'null'
        subject_id:
          type:
          - integer
          - 'null'
        scope_type:
          type:
          - string
          - 'null'
        scope_id:
          type:
          - integer
          - 'null'
        delay:
          type:
          - integer
          - 'null'
        text:
          type: string
        author_id:
          type: integer
        private:
          type:
          - boolean
          - 'null'
        colour:
          type: string
        url:
          type: string
      required: []
    ui_script_trigger_execution_request:
      type: object
      properties:
        subject_id:
          type:
          - integer
          - 'null'
          description: Id of the actual subject. Not needed for global triggers.
      required:
      - script_id
      - action
    ui_script_trigger_request:
      type: object
      properties:
        script_id:
          type: integer
        subject_type:
          "$ref": "#/components/schemas/lambdee_ui_script_triggers_subjects_enum"
        subject_id:
          type:
          - integer
          - 'null'
        scope_type:
          type:
          - string
          - 'null'
        scope_id:
          type:
          - integer
          - 'null'
        text:
          type:
          - string
          - 'null'
        author_id:
          type: integer
        private:
          type:
          - boolean
          - 'null'
        colour:
          type:
          - string
          - 'null'
        delay:
          type:
          - integer
          - 'null'
          description: Number of seconds of script execution delay
      required:
      - script_id
      - action
    script_run_response:
      type: object
      properties:
        id:
          type: integer
        script_id:
          type: integer
        script_name:
          type: string
        initiator_id:
          type: integer
        input:
          type:
          - string
          - 'null'
        triggered_at:
          type: string
          format: date_time
        executed_at:
          type:
          - string
          - 'null'
          format: date_time
        output:
          type: string
        state:
          type: string
        delay:
          type:
          - integer
          - 'null'
        url:
          type: string
      required: []
    script_run_request:
      type: object
      properties:
        output:
          type: string
        state:
          type: string
          enum:
          - running
          - executed
          - failed
          - timed_out
          - connection_failed
      required: []
servers:
- url: "{defaultProtocol}://{defaultHost}"
  variables:
    defaultProtocol:
      default: http
    defaultHost:
      default: localhost:3000
